generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  code              String     @id
  name              String
  affiliationNumber String? // optional
  board             Board
  medium            Medium
  establishmentYear Int? // optional
  schoolType        SchoolType
  contactEmail      String? // optional
  contactPhone      String? // optional
  website           String? // optional
  logoUrl           String? // optional
  address           Address    @relation(fields: [addressId], references: [id])
  addressId         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Admin     Admin[]
  Teacher   Teacher[]
  Class     Class[]
  Student   Student[]
}

model Admin {
  id          String @id @default(cuid())
  username    String @unique
  password    String
  designation String
  school      School @relation(fields: [schoolCode], references: [code])
  schoolCode  String
  role        Role   @relation(fields: [roleId], references: [id])
  roleId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id          String        @id @default(cuid())
  fullName    String
  email       String        @unique
  phone       String
  password    String
  role        Role?         @relation(fields: [roleId], references: [id])
  roleId      String?
  school      School?       @relation(fields: [schoolCode], references: [code])
  schoolCode  String?
  designation String
  status      TeacherStatus @default(INACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Section   Section[]
}

model Student {
  id          String        @id @default(cuid())
  name        String
  dob         DateTime
  gender      Gender
  address     String
  email       String        @unique
  password    String
  phone       String
  photo       String?
  admissionNo String        @unique
  aadhar      String        @unique
  category    String
  role        Role          @relation(fields: [roleId], references: [id])
  roleId      String
  class       Class         @relation(fields: [classId], references: [id])
  classId     String
  section     Section       @relation(fields: [sectionId], references: [id])
  sectionId   String
  status      StudentStatus @default(INACTIVE)
  schoolCode  String
  school      School        @relation(fields: [schoolCode], references: [code])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        RoleName @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admins     Admin[]
  Permission Permission[]
  Teacher    Teacher[]
  Student    Student[]
}

model Address {
  id      String   @id @default(cuid())
  street  String
  city    String
  state   String
  country String
  zipCode String
  schools School[]
}

model Permission {
  id         String  @id @default(cuid())
  module     String
  can_create Boolean @default(false)
  can_read   Boolean @default(false)
  can_update Boolean @default(false)
  can_delete Boolean @default(false)
  role       Role    @relation(fields: [roleId], references: [id])
  roleId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, module])
}

model Class {
  id         String    @id @default(cuid())
  name       String
  standard   Int
  school     School    @relation(fields: [schoolCode], references: [code])
  schoolCode String
  sections   Section[]
  students   Student[]
}

model Section {
  id             String    @id @default(cuid())
  name           String
  roomNo         String
  classTeacher   Teacher   @relation(fields: [classTeacherId], references: [id])
  classTeacherId String
  class          Class     @relation(fields: [classId], references: [id])
  classId        String
  students       Student[]
}

enum Gender {
  Male
  Female
  Other
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  LEFT
  TRANSFERRED
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
}

enum Board {
  CBSE
  ICSE
  STATE
  IB
  CAMBRIDGE
}

enum Medium {
  English
  Hindi
  Regional
}

enum SchoolType {
  Private
  Government
  Aided
  International
}

enum RoleName {
  admin
  teacher
  student
  parent
  staff
}
